name: Deploy on Tag

on:
  push:
    tags:
      - 'v*'
      - 'release-*'

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Get tag name
      id: tag
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Install npm dependencies
      run: npm ci

    - name: Build frontend assets
      run: npm run build

    - name: Build .NET application
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: Publish .NET application
      run: dotnet publish -c Release -o ./publish --no-build

    - name: Create deployment artifact
      run: |
        tar -czf pingcrm-${{ steps.tag.outputs.TAG_NAME }}.tar.gz -C publish .

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.TAG_NAME }}
        release_name: Release ${{ steps.tag.outputs.TAG_NAME }}
        draft: false
        prerelease: ${{ contains(steps.tag.outputs.TAG_NAME, 'beta') || contains(steps.tag.outputs.TAG_NAME, 'alpha') }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./pingcrm-${{ steps.tag.outputs.TAG_NAME }}.tar.gz
        asset_name: pingcrm-${{ steps.tag.outputs.TAG_NAME }}.tar.gz
        asset_content_type: application/gzip

  docker-build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get tag name
      id: tag
      run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Docker Hub (if configured)
      if: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
          ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' && format('{0}/pingcrm', secrets.DOCKER_USERNAME) || '' }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable=${{ !contains(steps.tag.outputs.TAG_NAME, 'beta') && !contains(steps.tag.outputs.TAG_NAME, 'alpha') }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max